#!/bin/sh
set -u

# Locate build itself. This will export the variable BUILD_DATA_DIR.
if [ -z "${BUILD_DATA_DIR:-}" ]; then
	_build_uninstalled_source_dir="$(dirname -- "$(realpath -- "$0")")"
	if [ -e "$_build_uninstalled_source_dir/.git" ]; then
		BUILD_DATA_DIR="$_build_uninstalled_source_dir"
	elif [ -n "${SNAP:-}" ]; then
		BUILD_DATA_DIR="$SNAP"
	else
		BUILD_DATA_DIR="/usr/share/build"
	fi
	export BUILD_DATA_DIR
fi

_build_out_of_tree=0
_build_question_mode=0
_build_dry_run_mode=0
_build_project_root=.

# Parse command line arguments.
while [ -n "${1:-}" ]; do
	case "$1" in
		--help|help)
			MAKEFILES="$BUILD_DATA_DIR/core/before.mk" \
				exec make \
					--no-builtin-rules \
					--no-builtin-variables \
					--warn-undefined-variables \
					--file "$BUILD_DATA_DIR/core/empty.mk" \
					-- help;
			;;
		--version|version)
			MAKEFILES="$BUILD_DATA_DIR/core/before.mk" \
				exec make \
					--no-builtin-rules \
					--no-builtin-variables \
					--warn-undefined-variables \
					--file "$BUILD_DATA_DIR/core/empty.mk" \
					-- version;
			;;
		-q|--question)
			_build_question_mode=1
			shift
			;;
		-n|--just-print|--dry-run|--recon)
			_build_dry_run_mode=1
			shift
			;;
		--out-of-tree|--oot)
			if [ -z "${2:-}" ]; then
				echo "build: option $1 requires an argument"
				exit 1
			fi
			_build_out_of_tree=1
			_build_project_root="$(realpath "$2")"
			shift 2
			;;
		--in)
			if [ -z "${2:-}" ]; then
				echo "build: option $1 requires an argument"
				exit 1
			fi
			if [ "$_build_out_of_tree" -eq 0 ]; then
				_build_out_of_tree=1
				_build_project_root="$(realpath .)"
			fi
			# echo "build: performing out-of-tree build of $(realpath --relative-to . "$_build_project_root") in $(realpath --relative-to . "$2")"
			mkdir -p "$2"
			cd "$2"
			shift 2
			;;
		-*)
			echo "build: unknown option: $1"
			exit 1
			;;
		[^-]*)
			# Treat everything else as make arguments.
			break
			;;
	esac
done

if [ "$_build_out_of_tree" -eq 0 ]; then
	# Find Buildfile in the current directory or above.
	while [ ! -f "$_build_project_root/Buildfile" ] && [ "$(realpath -- "$_build_project_root")" != / ]; do
		_build_project_root="$_build_project_root/..";
	done
	_build_project_root="$(realpath "$_build_project_root")"
else
	# Set VPATH to the real project root so that make can find the sources.
	export VPATH="$_build_project_root"
fi

# Ensure that project root directory contains the buildfile.
if [ ! -f "$_build_project_root/Buildfile" ]; then
	echo "build: cannot find Buildfile in $(realpath "$_build_project_root")"
	exit 1
fi

# If we are not building out of tree go to the project root directory.
if [ "$_build_out_of_tree" -eq 0 ]; then
	if [ "$(realpath "$_build_project_root")" != "$(realpath .)" ]; then
		echo "build: changing directory to $(realpath --relative-to . "$_build_project_root")"
		cd "$_build_project_root"
	fi
fi

# Run GNU make with all the right options.
BUILD_PROJECT_ROOT="$_build_project_root" MAKEFILES="$BUILD_DATA_DIR/core/before.mk $_build_project_root/Buildfile $BUILD_DATA_DIR/core/after.mk " \
	exec make \
	$(test -z "${MAKEFLAGS:-}" && echo --jobs "$(nproc)" || echo "--jobs") \
	$(test "$_build_question_mode" -eq 1 && echo --question) \
	$(test "$_build_dry_run_mode" -eq 1 && echo --dry-run) \
	--no-builtin-rules \
	--no-builtin-variables \
	--warn-undefined-variables \
	--no-print-directory \
	--output-sync=target \
	--include-dir="$BUILD_DATA_DIR/include" \
	--file $BUILD_DATA_DIR/core/empty.mk \
	-- "$@"
