#!/bin/sh
set -u

# Locate build itself. This will export the variable BUILD_INSTALLATION.
if [ -z "${BUILD_INSTALLATION:-}" ]; then
	_build_uninstalled_source_dir="$(dirname -- "$(realpath -- "$0")")"
	if [ -e "$_build_uninstalled_source_dir/.git" ]; then
		BUILD_INSTALLATION="$_build_uninstalled_source_dir"
	elif [ -n "${SNAP:-}" ]; then
		BUILD_INSTALLATION="$SNAP"
	else
		BUILD_INSTALLATION="/usr/share/build"
	fi
	export BUILD_INSTALLATION
fi

_build_out_of_tree=0
_build_question_mode=0
_build_verbose_level=0
_build_dry_run_mode=0
_build_srcdir="${BUILD_SRCDIR:-.}"
_build_outdir="${BUILD_OUTDIR:-.}"

# Parse command line arguments.
while [ -n "${1:-}" ]; do
	case "$1" in
		--help|help)
			MAKEFILES="$BUILD_INSTALLATION/core/before.mk" \
				exec make \
					--no-builtin-rules \
					--no-builtin-variables \
					--warn-undefined-variables \
					--file "$BUILD_INSTALLATION/core/empty.mk" \
					-- help;
			;;
		--version|version)
			MAKEFILES="$BUILD_INSTALLATION/core/before.mk" \
				exec make \
					--no-builtin-rules \
					--no-builtin-variables \
					--warn-undefined-variables \
					--file "$BUILD_INSTALLATION/core/empty.mk" \
					-- version;
			;;
		-q|--question)
			_build_question_mode=1
			shift
			;;
		-n|--just-print|--dry-run|--recon)
			_build_dry_run_mode=1
			shift
			;;
		-v|--verbose)
			_build_verbose_level=1
			shift
			;;
		-s|--silent|--quiet)
			_build_verbose_level=-1
			shift
			;;
		--srcdir|--out-of-tree|--oot)
			if [ -z "${2:-}" ]; then
				echo "build: option $1 requires an argument" >&2
				exit 1
			fi
			_build_out_of_tree=1
			_build_srcdir="$(realpath -- "$2")"
			if [ "$_build_verbose_level" -gt 0 ]; then
				echo "build: set source directory to $_build_srcdir"
			fi
			shift 2
			;;
		--outdir|--in)
			if [ -z "${2:-}" ]; then
				echo "build: option $1 requires an argument" >&2
				exit 1
			fi
			if [ "$_build_out_of_tree" -eq 0 ]; then
				_build_out_of_tree=1
				_build_srcdir="$(realpath .)"
				if [ "$_build_verbose_level" -gt 0 ]; then
					echo "build: set source directory to $_build_srcdir"
				fi
			fi
			_build_outdir="$(realpath -- "$2")"
			if [ "$_build_verbose_level" -gt 0 ]; then
				echo "build: set output directory to $_build_outdir"
			fi
			shift 2
			;;
		-*)
			echo "build: unknown option: $1" >&2
			exit 1
			;;
		[!-]*)
			# Treat everything else as make arguments.
			break
			;;
	esac
done

if [ "$_build_out_of_tree" -eq 0 ]; then
	# Find Buildfile in the current directory or above.
	while [ ! -f "$_build_srcdir/Buildfile" ] && [ "$(realpath -- "$_build_srcdir")" != / ]; do
		_build_srcdir="$_build_srcdir/..";
	done
	_build_srcdir="$(realpath -- "$_build_srcdir")"
	_build_outdir="$_build_srcdir"
fi

# Ensure that project root directory contains the buildfile.
if [ ! -f "$_build_srcdir/Buildfile" ]; then
	if [ "$_build_out_of_tree" -eq 1 ]; then
		echo "build: cannot find Buildfile in $(realpath -- "$_build_srcdir")" >&2
	else
		echo "build: cannot find Buildfile" >&2
	fi
	exit 1
fi

# Check if the output is going to a terminal and relay this to the ANSI module.
if [ -t 1 ]; then _build_isatty=yes; else _build_isatty=no; fi

# Run GNU make with all the right options.
_ANSI_isatty=$_build_isatty \
BUILD_SRCDIR=$(realpath --relative-base=$_build_srcdir --relative-to=. "$_build_srcdir") \
BUILD_OUTDIR=$(realpath --relative-base=$_build_srcdir --relative-to=. "$_build_outdir") \
MAKEFILES="$BUILD_INSTALLATION/core/before.mk $_build_srcdir/Buildfile $BUILD_INSTALLATION/core/after.mk " \
	exec make \
	$(test -z "${MAKEFLAGS:-}" && echo --jobs "$(nproc)") \
	$(test "$_build_question_mode" -eq 1 && echo --question) \
	$(test "$_build_verbose_level" -lt 0 && echo --quiet) \
	$(test "$_build_dry_run_mode" -eq 1 && echo --dry-run) \
	--no-builtin-rules \
	--no-builtin-variables \
	--warn-undefined-variables \
	--output-sync=target \
	--include-dir="$BUILD_INSTALLATION/include" \
	--file $BUILD_INSTALLATION/core/empty.mk \
	-- "$@"
