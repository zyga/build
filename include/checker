# vim: set filetype=make :
## Build module for autoconf-style checkers.
$(if $(findstring __build_module_ANSI,$(.VARIABLES)),,$(eval include ANSI))

__build_known_vars += CHECKER_DESCRIPTION CHECKER_C_MACRO CHECKER_ARG_%

# Generate a fragment of a C header file, a success-flag file and a file with the exit code.
all:: $(addprefix $(BUILD_OUTDIR)/,checker.exit checker.config.h checker.success)

# Checker module assumes that the importer will define a check target. We use
# that check target to perform the test.
.PHONY: check

# Clean the checker.log file in addition to what "all" target above mentions.
clean::
	rm -f checker.exit checker.config.h checker.success checker.log

# If the C module has been imported then add a few defaults.
ifneq ($(findstring __build_module_C,$(.VARIABLES)),)

# Define a program "test"
PROGRAMS = test

# The program can be either C or C++.
test_SOURCES ?= $(strip $(subst $(BUILD_SRCDIR)/,,$(wildcard $(BUILD_SRCDIR)/*.c $(BUILD_SRCDIR)/*.cpp)))

# For the program must build for the check to pass.
.PHONY: check
check:: $(BUILD_OUTDIR)/test$(EXE)

# Inject dependency on all the source files.
$(BUILD_OUTDIR)/checker.exit: $(test_SOURCES)

endif

# XXX: there's no nice way to say that this also creates checker.log
# without having make run the command twice :/
.ONESHELL: checker.exit
$(BUILD_OUTDIR)/checker.exit: Buildfile | $(BUILD_OUTDIR)/
	@+build check &>$(BUILD_OUTDIR)/checker.log; echo $$?> $@

# Build module definition.
#
# This is executed by Build after everything is imported and the user Buildfile
# has been read.
define __build_module_checker

# Export all checker arguments.
export $(filter CHECKER_ARG_%,$(.VARIABLES))

# Set a default value for the CHECKER_C_MACRO variable.
CHECKER_C_MACRO ?=

# Validate CHECKER_DESCRIPTION variable.
CHECKER_DESCRIPTION ?= $(error define CHECKER_DESCRIPTION for checker)

.ONESHELL: $(BUILD_OUTDIR)/checker.success
$(BUILD_OUTDIR)/checker.success: checker.exit | $(BUILD_OUTDIR)/
	@echo -n '$(ANSI_SGR_bold) * $(CHECKER_DESCRIPTION)... $(ANSI_SGR_normal)'
	if [ "`cat $<`" -eq 0 ]; then
		echo '$(ANSI_SGR_bold)$(ANSI_SGR_green)yes$(ANSI_SGR_normal)'
		echo 'Build uses this file to know the test passed' > $@
	else
		echo '$(ANSI_SGR_bold)$(ANSI_SGR_red)no $(ANSI_SGR_normal)'
		$(if $(findstring s,$(firstword $(MAKEFLAGS))),,echo; cat checker.log)
		rm -f $@
		exit `cat $<`
	fi

.ONESHELL: $(BUILD_OUTDIR)/checker.config.h
$(BUILD_OUTDIR)/checker.config.h: $(BUILD_OUTDIR)/checker.exit | $(BUILD_OUTDIR)/
ifeq ($(CHECKER_C_MACRO),)
	@truncate --size 0 $@
else
	@echo '/* $(CHECKER_DESCRIPTION) */' > $@
	if [ "`cat $<`" -eq 0 ]; then
		echo '#define $(CHECKER_C_MACRO) 1' >> $@
	else
		echo '#undef $(CHECKER_C_MACRO)' >> $@
	fi
endif

endef
