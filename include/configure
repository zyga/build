# vim: set filetype=make :

## Build module for build configuration system.
$(if $(findstring __build_module_C,$(.VARIABLES)),,$(error please import the C module first))

CHECKERS ?=

_configure_implicit_checkers ?=
__build_known_vars += CHECKERS
__build_known_vars += _configure_known_checkers

.PRECIOUS: .configure/%/
.configure/%/:
	@mkdir -p $@

# Pattern rules for running checkers from build distribution.
.configure/%/checker.config.h: $(BUILD_INSTALLATION)/checkers/%.check/Buildfile | .configure/%/
	@+build --quiet --srcdir $(dir $<) --outdir $| $(notdir $@)
.configure/%/checker.success:  $(BUILD_INSTALLATION)/checkers/%.check/Buildfile | .configure/%/
	@+$(if $(CHECKER_$*_OPTIONAL),-)build --quiet --srcdir $(dir $<) --outdir $| $(notdir $@)

# Pattern rules for running checkers from project tree.
.configure/%/checker.config.h: $(BUILD_SRCDIR)/.build/%.check/Buildfile | .configure/%/
	@+build --quiet --srcdir $(dir $<) --outdir $| $(notdir $@)
.configure/%/checker.success:  $(BUILD_SRCDIR)/.build/%.check/Buildfile | .configure/%/
	@+$(if $(CHECKER_$*_OPTIONAL),-)build --quiet --srcdir $(dir $<) --outdir $| $(notdir $@)

# Clean generated config.h file and entire .configure directory when cleaning.
.PHONY: clean
clean::
	rm -f config.h
	rm -rf .configure

# Print checkers used when asked for defs.
# Explicitly mark implicit checkers so that people get the idea.
.PHONY: defs
defs::
	@echo "checkers used:"
	@$(foreach checker,$(sort $(CHECKERS)),echo '  - $(checker) [$(strip $(if $(CHECKER_$(checker)_OPTIONAL),optional) $(if $(findstring $(checker),$(_configure_implicit_checkers)),implicit,explicit))]';)

.PHONY: help-checkers
help-checkers:
	@echo "build knows about the following checkers:"
	@$(foreach checker,$(_configure_known_checkers),echo '- $(notdir $(checker))';)

# Build module definition.
#
# This is executed by Build after everything is imported and the user Buildfile
# has been read.
define __build_module_configure

_configure_known_checkers := $(sort $(wildcard $(BUILD_INSTALLATION)/checkers/*.check) $(wildcard $(BUILD_SRCDIR)/.build/*.check))

# The C module suggests implicit checkers based on source files used.
CHECKERS += $(sort $(_configure_implicit_checkers))

# Validate that all CHECKERS are correct.
$(foreach checker,$(CHECKERS),$(if $(findstring $(checker),$(_configure_known_checkers)),,$(error CHECKERS referenced unknown checker $(checker))))

__build_known_vars += $(foreach checker,$(CHECKERS),CHECKER_$(checker)_OPTIONAL)

# Checkers are not optional by default. 
$(foreach checker,$(CHECKERS),$(eval CHECKER_$(checker)_OPTIONAL ?=))

# Make each object file depend on config.h
$(foreach prog,$(PROGRAMS),$($(prog)_OBJECTS)): config.h

# Make each object file know that it can include config.h
$(foreach prog,$(PROGRAMS),$(eval $($(prog)_OBJECTS): CPPFLAGS += -DHAVE_CONFIG_H))

# Generate C header file with configuration data.
ifneq ($(CHECKERS),)

# Construct the config.h file out of partial config.h files from each checker.
# Require each non-optional checker to succeed.
# FIXME: the .success files are ignored by make 
config.h: $(foreach checker,$(CHECKERS),.configure/$(checker)/checker.config.h)
	cat $^ >$@
else
	truncate --size 0 $@
endif

# Add a configure target because people feel good about it.
# It tries to get the successful status of each checker (note that the
# appropriate target handles optionality already.
configure:: $(sort $(foreach checker,$(CHECKERS),.configure/$(checker)/checker.success))

endef # __build_module_configure
